name: Build Release Pipeline
on:
  workflow_dispatch:
    inputs:
      tag:
        description: "Tag name. Example: v1.0.0"
        type: string
        required: true
      push_release_docker_tag:
        description: "Push release docker tag. This will trigger ArgoCD deployment."
        default: "yes"
        type: choice
        options:
          - "yes"
          - "no"

run-name: "Release build ${{ github.event.inputs.tag }} by @${{ github.actor }}"

permissions:
  contents: write

jobs:
  build-artifact:
    runs-on: self-hosted
    name: build release artifact
    env:
      AWS_ACCOUNT: ${{ vars.AWS_ACCOUNT }}
      AWS_REGION: ${{ vars.AWS_REGION }}
      RELEASE_TAG: ${{ github.event.inputs.tag }}
    steps:
      - name: Validate Tag Format
        run: |
          if [[ ${{ github.event.inputs.tag }} =~ ^v[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            echo "Tag format is valid. Current: ${{ github.event.inputs.tag }}"
          else
            echo "Invalid tag format. A valid tag format is v1.0.0"
            exit 1
          fi

      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: ECR Login
        run: |
          aws ecr get-login-password --region us-west-2 | docker login --username AWS --password-stdin $AWS_ACCOUNT.dkr.ecr.$AWS_REGION.amazonaws.com

      - name: Build and push release tag
        if: ${{ github.event.inputs.push_release_docker_tag == 'yes' }}
        id: build_push_release_tag
        env:
          RELEASE_BUILD: true
        run: |
          pwd
          ls -al
          apollo-ng

      - name: Build and push tag only
        if: ${{ github.event.inputs.push_release_docker_tag != 'yes' }}
        id: build_push_tag
        run: |
          pwd
          ls -al
          apollo-ng

      - name: Clean up
        run: |
          docker rmi $(docker images -f dangling=true  -q) || true
        continue-on-error: true

      - name: Push release tag
        if: ${{ steps.build_push_tag.outcome == 'success' || steps.build_push_release_tag.outcome == 'success' }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          git tag ${{ github.event.inputs.tag }}
          git push origin ${{ github.event.inputs.tag }}
